from galgebra.ga import Ga

# ----- Define the Cl(3,3) algebra -----
# Six basis: e1, e2, e3 (space), f1, f2, f3 (momentum)
GA_tuple = Ga.build('e1 e2 e3 f1 f2 f3', g=[1,1,1,-1,-1,-1])
GA, e1, e2, e3, f1, f2, f3 = GA_tuple

print("Basis vectors:")
print(f"e1: {e1}, e2: {e2}, e3: {e3}")
print(f"f1: {f1}, f2: {f2}, f3: {f3}")

# ----- Bivector as geometric 'i' -----
B = f1 ^ f2
print("Bivector B = f1^f2:", B)
print("B^2 =", (B*B).simplify())

# ----- Rotor using real geometric algebra -----
from sympy import symbols, cos, sin
theta = symbols('theta')
R = cos(theta) + B*sin(theta)
print("Rotor R = cos(theta) + B*sin(theta):", R)

# ----- Rotate a vector (try e1, f1, e2 for various results) -----
# For generality, rotate e2, which lies in the plane of B
v = e2
v_rot = R * v * ~R
print("Rotated e2 by rotor:", v_rot.simplify())

# ----- Kinetic term (Laplacian) -----
from sympy import Function
x1, x2, x3, p1, p2, p3 = symbols('x1 x2 x3 p1 p2 p3')
psi = Function('psi')(x1, x2, x3, p1, p2, p3)
kinetic = (
    psi.diff(p1, 2) + psi.diff(p2, 2) + psi.diff(p3, 2)
    + psi.diff(x1, 2) + psi.diff(x2, 2) + psi.diff(x3, 2)
)
print("Kinetic term:", kinetic)

# ----- Nonzero Poynting-like vector (real, GA) -----
# Use E along e2+e3, B in e2^e3 (for a nonzero result)
E_vec = e2 + e3
B_biv = e2 ^ e3
S = (E_vec * B_biv).grade(1)
print("Poynting-like vector (E = e2+e3, B = e2^e3):", S)

# ----- Confirm: all real terms, no complex numbers -----
